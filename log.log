amd64 JIT by Samuel Michael Squire
	https://github.com/samsquire/compiler

pagesize: 4096

Parsing code
function talker(int a, int b) {
  return a + b;
}
printf("value2: %d\n", talker(8, 9));
FIRST INTO 0x5605b55be8a0
HASH TABLE 200
case 6953778704349: /* member */ 
break;
case 7572387384277067: /* function */ 
break;
case 5863476: /* if */ 
break;
case 6953974653989: /* return */ 
break;
case 6385555319: /* open */ 
break;
case 210708961883: /* close */ 
break;
case 210709067314: /* comma */ 
break;
case 193486030: /* add */ 
break;
case 7572940974490733: /* subtract */ 
break;
case 7572685654880005: /* multiply */ 
break;
case 193504464: /* rax */ 
break;
case 193504497: /* rbx */ 
break;
case 193504530: /* rcx */ 
break;
case 193504563: /* rdx */ 
break;
case 193505043: /* rsi */ 
break;
case 193504548: /* rdi */ 
break;
case 193505050: /* rsp */ 
break;
case 5863727: /* r8 */ 
break;
case 5863728: /* r9 */ 
break;
case 193502808: /* r10 */ 
break;
case 193502809: /* r11 */ 
break;
case 193502810: /* r12 */ 
break;
case 193502811: /* r13 */ 
break;
case 193502812: /* r14 */ 
break;
case 193502813: /* r15 */ 
break;

Getting token
parsebegin Skipping whitespace

-1 rc is
functionfunctionbodybegin Skipping whitespace

-1 rc is
Is a function talker
open
-1 rc is
funcparamname Skipping whitespace

-1 rc is
type is int name is a
there are 0 parameters
loopparameterlist Skipping whitespace

-1 rc is
funcparamname Skipping whitespace

-1 rc is
type is int name is b
there are 1 parameters
commacheck CLOSE TAG
loopparameterlist CLOSE TAG
functioncurlyopencheck Skipping whitespace
function parse INTO 0x5605b55bfa20functionbodyitem Skipping whitespace
functionbodyitem Skipping whitespace
functionbodyitem Skipping whitespace

-1 rc is
Hash for token return is 6953974653989
functionparse Return statement
0x5605b55bfa20
functionbodyitem Skipping whitespace

-1 rc is
Hash for token a is 177670
functionparse parseexpression Is an identifier a
identifier expression 0x5605b55c0df0
statements 0x5605b55c0210
expression location 0 0x5605b55c0a60
 identifier a 0
functionbodyitem Skipping whitespace
Hash for token add is 193486030
functionbodyitem Skipping whitespace

-1 rc is
Hash for token b is 177671
functionparse parseexpression Is an identifier b
identifier expression 0x5605b55c22e0
statements 0x5605b55c1af0
expression location 1 0x5605b55c1f50
 identifier a 0
 identifier b 0
functionbodyitem CLOSE expression
Hash for token endstatement is -3372849529167478127
functionparse End of statement
functionbodyitem Skipping whitespace
Getting token
parsebegin Skipping whitespace

-1 rc is
printffunctionparse Funcbody Is an identifier printf
functionparse New position is 0
identifier INTO 0x5605b55be8a0
Hash for token open is 6385555319
open bracket
OWNER 0
 identifier printf 0
expression location 1 0x5605b55c2b90
 method call method 0
  identifier printf 0
Parsing subexpression


inside a quote


-1 rc is
Hash for token value2: %d\n is -2533170842880017663
exprparse parseexpression Is an identifier value2: %d\n
identifier expression 0x5605b55c3e00
statements 0x5605b55c3600
expression location 1 0x5605b55c3a70
 identifier printf 0
 identifier value2: %d\n 0
Hash for token comma is 210709067314
exprparse Comma encountered, creating new statement
functionbodyitem Skipping whitespace

-1 rc is
Hash for token talker is 6954047882280
exprparse parseexpression Is an identifier talker
identifier expression 0x5605b55c4710
statements 0x5605b55c4190
expression location 0 0x5605b55c46b0
 identifier talker 0
Hash for token open is 6385555319
open bracket
OWNER 0
 identifier talker 0
expression location 1 0x5605b55c46b0
 method call method 0
  identifier talker 0
Parsing subexpression

-1 rc is
Hash for token 8 is 177629
exprparse parseexpression Is an identifier 8
identifier expression 0x5605b55ccf00
statements 0x5605b55c4790
expression location 1 0x5605b55ccb70
 identifier talker 0
 identifier 8 8
Hash for token comma is 210709067314
exprparse Comma encountered, creating new statement
functionbodyitem Skipping whitespace

-1 rc is
Hash for token 9 is 177630
exprparse parseexpression Is an identifier 9
identifier expression 0x5605b55cdaa0
statements 0x5605b55cd290
expression location 0 0x5605b55cd710
 identifier 9 9
functionbodyitem CLOSE TAG
functionbodyitem CLOSE TAG
end early
functionbodyitem CLOSE expression
#### Code:
function talker(int a, int b) {
  return a + b;
}
printf("value2: %d\n", talker(8, 9));
Dumping AST
 method call method 0
  identifier printf 0
  identifier value2: %d\n 0
  method call method 0
   identifier talker 0
   identifier 8 8
   identifier 9 9
##########Function talker
- parameter name a
- parameter type int
- parameter name b
- parameter type int
Has 2 statements
 return (null) 0
  add (null) 0
   identifier a 0
   identifier b 0
Dumping ANF
ANF for function talker
identifier b 0
identifier a 0
add
return
ANF for main
identifier 9 9
identifier 8 8
identifier talker 0
method call
identifier value2: %d\n 0
identifier printf 0
method call
Assigning registers
Found method call
Found expression in method call 5 8 rdi
Found expression in method call 5 9 rsi
Found method call
Found expression in method call 5 value2: %d\n rdi
submethodcall
Found expression in method call 5 8 rdi
Found expression in method call 5 9 rsi
Found expression in method call 3 method rsi
FOUND PRECOLOURED REGISTER 0x5605b488e549
Created a identifier reference
FOUND PRECOLOURED REGISTER 0x5605b488e54d
Created a identifier reference
Created a identifier reference
FOUND PRECOLOURED REGISTER 0x5605b488e549
Method call Assigning 8 to variable t0
FOUND PRECOLOURED REGISTER 0x5605b488e54d
Created a identifier reference
Created a identifier reference
Method call Assigning 5 to variable t2
9 <- 9
8 <- 8
talker <- talker
t1 <- talker(8 , 9 , )
value2: %d\n <- value2: %d\n
printf <- printf
t3 <- printf(value2: %d\n , t1 , )
Created a identifier reference
Created a identifier reference
Add operation Assigning 2 to variable t0
Return operation Assigning 0 to variable t1
b <- b
a <- a
t0 <- a + b
t1 <- t0 (ret)


from /proc/self/maps:
5605b55bd000-5605b55ff000 rw-p 00000000 00:00 0                          [heap]
heap start is 5605b55bd000
9
looking up 9
key doesn't exist
8
looking up 8
key doesn't exist
talker
looking up talker
key doesn't exist
talker
looking up talker
key exists
8
looking up 8
key exists
9
looking up 9
key exists
value2: %d\n
looking up value2: %d\n
key doesn't exist
printf
looking up printf
key doesn't exist
printf
looking up printf
key exists
value2: %d\n
looking up value2: %d\n
key exists
t1
looking up t1
key doesn't exist
Variable 9 appears 0-3
Variable 8 appears 1-3
Variable talker appears 2-3
Variable value2: %d\n appears 4-6
Variable printf appears 5-6
Variable t1 appears 3-6
### DOING GRAPH COLOURING
7 assignments
Variable 0: 10-9 
Found reference 10-9 to 9
identifier 9 9
Forward link to 10-9 NOT found
0x5605b55dfab0
Links to 10-9
- 9
Variable 1: 9-8 
Found reference 9-8 to 8
identifier 8 8
Forward link to 9-8 NOT found
0x5605b55dfe40
Links to 9-8
- 8
Variable 2: 7-talker 
Found reference 7-talker to talker
identifier talker 0
Forward link to 7-talker NOT found
0x5605b55e01d0
Links to 7-talker
- talker
Variable 3: 8-t0 
Found reference 8-t0 to talker
method call method 0
 identifier talker 0
 identifier 8 8
 identifier 9 9
Forward link to 8-t0 NOT found
0x5605b55e05a0
Links to 8-t0
- talker
Found reference 8-t0 to 8
method call method 0
 identifier talker 0
 identifier 8 8
 identifier 9 9
Forward link to 8-t0 found
0x5605b55e05a0
Links to 8-t0
- talker
- 8
Found reference 8-t0 to 9
method call method 0
 identifier talker 0
 identifier 8 8
 identifier 9 9
Forward link to 8-t0 found
0x5605b55e05a0
Links to 8-t0
- talker
- 8
- 9
Variable 4: 6-value2: %d\n 
Found reference 6-value2: %d\n to value2: %d\n
identifier value2: %d\n 0
Forward link to 6-value2: %d\n NOT found
0x5605b55e0a30
Links to 6-value2: %d\n
- value2: %d\n
Variable 5: 4-printf 
Found reference 4-printf to printf
identifier printf 0
Forward link to 4-printf NOT found
0x5605b55e0dc0
Links to 4-printf
- printf
Variable 6: 5-t2 
Found reference 5-t2 to printf
method call method 0
 identifier printf 0
 identifier value2: %d\n 0
 method call method 0
  identifier talker 0
  identifier 8 8
  identifier 9 9
Forward link to 5-t2 NOT found
0x5605b55e11d0
Links to 5-t2
- printf
Found reference 5-t2 to value2: %d\n
method call method 0
 identifier printf 0
 identifier value2: %d\n 0
 method call method 0
  identifier talker 0
  identifier 8 8
  identifier 9 9
Forward link to 5-t2 found
0x5605b55e11d0
Links to 5-t2
- printf
- value2: %d\n
Found reference 5-t2 to t1
method call method 0
 identifier printf 0
 identifier value2: %d\n 0
 method call method 0
  identifier talker 0
  identifier 8 8
  identifier 9 9
Forward link to 5-t2 found
0x5605b55e11d0
Links to 5-t2
- printf
- value2: %d\n
- t1
FOUND EDGE WITH EDGE COUNT < 6 9
FOUND EDGE WITH EDGE COUNT < 6 printf
FOUND EDGE WITH EDGE COUNT < 6 t3
identifier printf 0
identifier value2: %d\n 0
FOUND EDGE WITH EDGE COUNT < 6 t1
identifier talker 0
identifier 8 8
FOUND EDGE WITH EDGE COUNT < 6 8
FOUND EDGE WITH EDGE COUNT < 6 talker
FOUND EDGE WITH EDGE COUNT < 6 value2: %d\n
Register colouring starting with 7 items
###### GRAPH COLOUR STACK ITEM
#### 6 registers available
 - rdi - rsi - rdx - rcx - rbx - rax
STACK ITEM
Vertice is precoloured variable value2: %d\n 5 0
Vertice is precoloured register rdi
Found removed register in 0
###### GRAPH COLOUR STACK ITEM
#### 5 registers available
 - rsi - rdx - rcx - rbx - rax
STACK ITEM
###### GRAPH COLOUR STACK ITEM
#### 5 registers available
 - rsi - rdx - rcx - rbx - rax
STACK ITEM
Vertice is precoloured variable 8 5 0
Vertice is precoloured register rdi
###### GRAPH COLOUR STACK ITEM
#### 4 registers available
 - rsi - rdx - rcx - rbx
STACK ITEM
identifier talker 0
identifier 8 8
Vertice is precoloured variable t1 3 0
Vertice is precoloured register rsi
Found removed register in 0
###### GRAPH COLOUR STACK ITEM
#### 3 registers available
 - rdx - rcx - rbx
STACK ITEM
identifier printf 0
identifier value2: %d\n 0
t3 Doesn't have a register assigned
Chosen rdx
###### GRAPH COLOUR STACK ITEM
#### 2 registers available
 - rdx - rcx
STACK ITEM
###### GRAPH COLOUR STACK ITEM
#### 2 registers available
 - rdx - rcx
STACK ITEM
Vertice is precoloured variable 9 5 0
Vertice is precoloured register rsi
9 register = rsi
8 register = rdi
talker register = (null)
t1 register = rsi
value2: %d\n register = rdi
printf register = (null)
t3 register = rdx
### END GRAPH COLOURING
b
looking up b
key doesn't exist
a
looking up a
key doesn't exist
a
looking up a
key exists
b
looking up b
key exists
t0
looking up t0
key doesn't exist
Variable b appears 0-2
Variable a appears 1-2
Variable t0 appears 2-3
### DOING GRAPH COLOURING
4 assignments
Variable 0: 3-b 
Found reference 3-b to b
identifier b 0
Forward link to 3-b NOT found
0x5605b55e2970
Links to 3-b
- b
Variable 1: 1-a 
Found reference 1-a to a
identifier a 0
Forward link to 1-a NOT found
0x5605b55e2d00
Links to 1-a
- a
Variable 2: 2-t0 
Found reference 2-t0 to a
add (null) 0
 identifier a 0
 identifier b 0
Forward link to 2-t0 NOT found
0x5605b55e30b0
Links to 2-t0
- a
Found reference 2-t0 to b
add (null) 0
 identifier a 0
 identifier b 0
Forward link to 2-t0 found
0x5605b55e30b0
Links to 2-t0
- a
- b
Variable 3: 0-t1 
Found reference 0-t1 to t0
return (null) 0
 add (null) 0
  identifier a 0
  identifier b 0
Forward link to 0-t1 NOT found
0x5605b55e34e0
Links to 0-t1
- t0
FOUND EDGE WITH EDGE COUNT < 6 t1
add (null) 0
 identifier a 0
 identifier b 0
FOUND EDGE WITH EDGE COUNT < 6 t0
identifier a 0
identifier b 0
FOUND EDGE WITH EDGE COUNT < 6 a
FOUND EDGE WITH EDGE COUNT < 6 b
Register colouring starting with 4 items
###### GRAPH COLOUR STACK ITEM
#### 6 registers available
 - rdi - rsi - rdx - rcx - rbx - rax
STACK ITEM
b Doesn't have a register assigned
Chosen rdi
###### GRAPH COLOUR STACK ITEM
#### 5 registers available
 - rdi - rsi - rdx - rcx - rbx
STACK ITEM
a Doesn't have a register assigned
Chosen rsi
###### GRAPH COLOUR STACK ITEM
#### 4 registers available
 - rdi - rsi - rdx - rcx
STACK ITEM
identifier a 0
identifier b 0
t0 Doesn't have a register assigned
Chosen rdx
###### GRAPH COLOUR STACK ITEM
#### 3 registers available
 - rdi - rsi - rdx
STACK ITEM
add (null) 0
 identifier a 0
 identifier b 0
t1 Doesn't have a register assigned
Chosen rcx
b register = rdi
a register = rsi
t0 register = rdx
t1 register = rcx
### END GRAPH COLOURING
Codegen for main
generating code region for function talker 4096
Generating reference
Generating reference
Generating add
3 add bytes length
Add instruction left is rsi
Right instruction right is rdi
my register is rdx
3 operand move bytes length
moving register right into destination registerMoving from rdi to rdx
Generating return
Moving from rdx to rax

55 48 89 fa 48 1 f2 48 
89 d0 5d c3 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 GENERATING 55
Generating reference
9 9 <- 9
reference 9
Register for identifier is 
rsimov $9, %rsi
48
c7
c6
9
0
0
0
Generating reference
8 8 <- 8
reference 8
Register for identifier is 
rdimov $8, %rdi
48
c7
c7
8
0
0
0
Generating method call
Resolving function talker
Inspecting function talker
talker
Method call to function talker at 0x7fdc8a9d0000
8 0x5605b55d1b80
0x5605b55d1b80 0x5605b55e4200 creating function id 94582517678592
0x5605b482583f creating function stub 94582503266367
Method call output needs to go to register rsi
Moving from rax to rsi
Generating reference
Generating method call
Resolving function printf
Inspecting function talker
printf
Method call to function printf at 0x7fdc8a65c740
value2: %d\n 0x5605b55c3860
0x5605b55c3860 0x5605b55c3860 relative pointer 94582517545056
0x7fdc8a65c740 0x7fdc8a65c740 relative pointer 140585191458624
Method call output needs to go to register rdx
Moving from rax to rdx
Main machine code

55 48 c7 c6 9 0 0 0 
48 c7 c7 8 0 0 0 49 
bc 0 0 0 0 0 0 0 
0 49 bb 3f 58 82 b4 5 
56 0 0 41 ff d3 48 89 
c6 48 bf 60 38 5c b5 5 
56 0 0 49 bb 40 c7 65 
8a dc 7f 0 0 41 ff d3 
48 89 c2 5d c3 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 
Executing machine code at 0x7fdc8a9cf000
Compile stub C calling convention
         rdi = 8
         rsi = 9
Calling compile of user function for stub 0
Generating reference
Generating reference
Generating add
3 add bytes length
Add instruction left is rsi
Right instruction right is rdi
my register is rdx
3 operand move bytes length
moving register right into destination registerMoving from rdi to rdx
Generating return
Moving from rdx to rax
Patching callsites
Function talker compiled to 0x7fdc8a9d0000 there are 1 callsites
0
Need to patch 0x7fdc8a9cf000 27 with 0x7fdc8a9d0000 0x7fdc8a9cf01b
SUCCESS Patching callsite to 27
Lazy compilation talker machine code

55 48 89 fa 48 1 f2 48 
89 d0 5d c3 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 Main method again machine code

55 48 c7 c6 9 0 0 0 
48 c7 c7 8 0 0 0 49 
bc 0 0 0 0 0 0 0 
0 49 bb 0 0 9d 8a dc 
7f 0 0 41 ff d3 48 89 
c6 48 bf 60 38 5c b5 5 
56 0 0 49 bb 40 c7 65 
8a dc 7f 0 0 41 ff d3 
48 89 c2 5d c3 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 Compiled function result is 17
value2: 17\nc
